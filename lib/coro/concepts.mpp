module;

#include <coroutine>
#include <exception>
#include <type_traits>

export module miller.coro:concepts;

// Adapted from P1288

namespace mi::coro {

    template< typename T >
    struct is_valid_await_suspend_return_type : std::false_type {};

    template<>
    struct is_valid_await_suspend_return_type<bool> : std::true_type {};

    template<>
    struct is_valid_await_suspend_return_type<void> : std::true_type {};

    template< typename promise_type >
    struct is_valid_await_suspend_return_type< std::coroutine_handle< promise_type > > : std::true_type {};

    template< typename T >
    concept await_suspend_return_type = is_valid_await_suspend_return_type< T >::value;


    // A type, T, matches this concept if it implements valid overloads
    // for await_ready(), await_suspend() and await_resume() in _any_
    // natural coroutine context (ie. await_suspend() accepts an argument
    // of type coroutine_handle<void>)
    export template< typename T >
    concept awaiter = requires(T &&a) {
        { a.await_ready() } -> std::convertible_to< bool >;
        { a.await_suspend( std::coroutine_handle() ) } -> await_suspend_return_type;
        { a.await_resume() };
    };

    template< typename T, typename R >
    concept resumes_with_type = requires (T &&a) {
        { a.await_resume() } -> std::same_as< R >;
    };

    // A type, T satisfies awaiter_of< T, R > if a value of type T& implements
    // the await_ready(), await_suspend() and await_resume() methods and the
    // result of await_resume() is convertible to type R.
    export template< typename T, typename R >
    concept awaiter_of = awaiter< T > && resumes_with_type< T, R >;

    template< typename T >
    concept weak_has_member_co_await = requires(T &&a) {
        static_cast< T&& >(a).operator co_await();
    };

    template< typename T >
    concept weak_has_non_member_co_await = requires(T &&a) {
        operator co_await(static_cast< T&& >(a));
    };

    // Returns the result of applying operator co_await() to the function’s
    // argument, if the operator is defined, otherwise returns a reference
    // to the input argument.
    export template< weak_has_member_co_await T >
    decltype(auto) get_awaiter(T &&a) noexcept(
        noexcept(static_cast< T&& >(a).operator co_await())
    ) {
        return static_cast< T&& >(a).operator co_await();
    }

    export template< weak_has_non_member_co_await T >
    decltype(auto) get_awaiter(T &&a) noexcept(
        noexcept(operator co_await(static_cast< T&& >(a)))
    ) {
        return operator co_await(static_cast< T&& >(a));
    }

    export template< typename T >
        requires (!weak_has_non_member_co_await< T > && !weak_has_member_co_await< T >)
    T&& get_awaiter(T &&a) noexcept {
        return static_cast< T&& >(a);
    }

    // A type, T, is awaitable if, given an expression, E, of type, T, then the
    // expression ‘co_await E’ is a valid expression within _any_ natural
    // coroutine context. Such a type must either have a member or non-member
    // operator co_await() or must be an awaiter.
    export template< typename T >
    concept awaitable =
        std::movable< T > &&
        requires (T &&a) {
            { get_awaiter(static_cast< T&& >(a)) } -> awaiter;
        };


    // A type T, is awaitable_of<T, R> if it is awaitable and the result of
    // the co_await expression is convertible to R.
    export template< typename T, typename R >
    concept awaitable_of =
        awaitable< T > &&
        requires (T &&a) {
            { get_awaiter(static_cast< T&& >(a)) } -> awaiter_of< R >;
        };

    // Query the type returned from calling member or non-member
    // operator co_await() on a value of type, T, if operator co_await()
    // is defined, otherwise yields the type T&&.
    export template< typename T >
    struct awaiter_type {
        using type = decltype( get_awaiter(std::declval<T>()) );
    };

    export template< typename T >
    using awaiter_type_t = typename awaiter_type< T >::type;

    // Query the result-type of a co_await expression with an operand of type T.
    export template< awaitable T >
    struct await_result
    {
        using type = decltype(
            std::declval< awaiter_type_t< T >& >().await_resume()
        );
    };

    export template< typename T >
    using await_result_t = typename await_result< T >::type;


} // namespace mi::coro
