module;

#include <coroutine>
#include <exception>

export module miller.coro:fmap;

import :concepts;

namespace mi::coro
{
    export template< typename func, awaiter awaiter_type >
    struct fmap_awaiter
    {
        fmap_awaiter(func &&f, awaiter_type &&a)
            noexcept(
                std::is_nothrow_move_constructible_v< awaiter_type > &&
				noexcept(get_awaiter(static_cast< awaiter_type&& >(a)))
            )
				: _func(static_cast< func&& >(f))
				, _awaiter(get_awaiter(static_cast< awaiter_type&& >(a)))
			{}

        decltype(auto) await_ready()
            noexcept(noexcept(static_cast< awaiter_type&& >(_awaiter).await_ready()))
        {
            return static_cast< awaiter_type&& >(_awaiter).await_ready();
        }

        template< typename promise_type >
        decltype(auto) await_suspend(std::coroutine_handle< promise_type > h)
            noexcept(noexcept(static_cast< awaiter_type&& >(_awaiter).await_suspend(std::move(h))))
        {
            return static_cast< awaiter_type&& >(_awaiter).await_suspend(std::move(h));
        }

        decltype(auto) await_resume()
            noexcept(noexcept(std::invoke(static_cast< func&& >(_func))))
            requires std::is_void_v< await_result_t< awaiter_type > >
        {
            static_cast< awaiter_type&& >(_awaiter).await_resume();
            return std::invoke(static_cast< func&& >(_func));
        }

        decltype(auto) await_resume()
            noexcept(noexcept(std::invoke(
                static_cast< func&& >(_func),
                static_cast< awaiter_type&& >(_awaiter).await_resume()
            )))
            requires (not std::is_void_v< await_result_t< awaiter_type > >)
        {
            return std::invoke(
                static_cast< func&& >(_func),
                static_cast< awaiter_type&& >(_awaiter).await_resume()
            );
        }

    private:
        awaiter_type _awaiter;
        func _func;
    };

    export template< typename func, awaitable awaitable_type >
    struct fmap_awaitable
    {
        static_assert(!std::is_lvalue_reference_v< func >);
        static_assert(!std::is_lvalue_reference_v< awaitable_type >);

        template<
            std::constructible_from< func > func_arg,
            std::constructible_from< awaitable_type > awaitable_arg
        >
        explicit fmap_awaitable(func_arg &&f, awaitable_arg &&a)
            noexcept(
                std::is_nothrow_constructible_v< func, func_arg&& > &&
                std::is_nothrow_constructible_v< awaitable_type, awaitable_arg&& >
            )
            : _func(static_cast< func_arg&& >(f))
            , _awaitable(static_cast< awaitable_arg&& >(a))
        {}

        auto operator co_await() const & {
            return fmap_awaiter< const func&, const awaitable_type& >(_func, _awaitable);
        }

        auto operator co_await() & {
            return fmap_awaiter< func&, awaitable_type& >(_func, _awaitable);
        }

        auto operator co_await() && {
            return fmap_awaiter< func&&, awaitable_type&& >(
                static_cast< func&& >(_func),
                static_cast< awaitable_type&& >(_awaitable)
            );
        }

    private:
        func _func;
        awaitable_type _awaitable;
    };

    template< typename func_type >
	struct fmap_transform
	{
		explicit fmap_transform( func_type&& fn )
			noexcept(std::is_nothrow_move_constructible_v< func_type >)
			: func(std::forward< func_type >(fn))
		{}

		func_type func;
	};

    export template< typename func, typename awaitable_type >
	auto fmap(func &&fn, awaitable_type &&aw) {
		return fmap_awaitable<
			std::remove_cv_t< std::remove_reference_t< func > >,
			std::remove_cv_t< std::remove_reference_t< awaitable_type > >
        >(
			std::forward< func >(fn),
			std::forward< awaitable_type >(aw)
        );
	}

	export template< typename func >
	auto fmap(func &&fn) {
		return fmap_transform< func >{ std::forward<func>(fn) };
	}

    export template< typename type, typename func >
	decltype(auto) operator|(type &&value, fmap_transform< func > &&transform)
	{
		// Use ADL for finding fmap() overload.
		return fmap(std::forward< func >(transform.func), std::forward< type >(value));
	}

	export template< typename type, typename func >
	decltype(auto) operator|(type &&value, const fmap_transform< func > &transform)
	{
		// Use ADL for finding fmap() overload.
		return fmap(transform.func, std::forward< type >(value));
	}

	export template< typename type, typename func >
	decltype(auto) operator|(type &&value, fmap_transform< func > &transform)
	{
		// Use ADL for finding fmap() overload.
		return fmap(transform.func, std::forward< type >(value));
	}

} // namespace mi::coro
