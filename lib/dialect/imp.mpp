module;

#include <algorithm>
#include <cassert>
#include <coroutine>
#include <iostream>
#include <string>
#include <string_view>
#include <variant>
#include <vector>

#include <spdlog/spdlog.h>

#include <refl.hpp>

export module miller.dialect.imp;

import miller.coro;
import miller.util;
import miller.program;

namespace stdr = std::ranges;

export namespace mi::imp {

    //
    // arithmetic expressions
    //

    struct constant {

        constexpr constant(mi::integral_like auto v)
            : value(v)
        {}

        bigint_t value;
    };

    struct variable {
        std::string name;
    };

    struct arithmetic_binary {
        enum class kind_t { add, sub, mul, div };

        kind_t kind;
        box< struct aexpr_t > lhs, rhs;
    };

    using arithmetic_kind = arithmetic_binary::kind_t;

    using aexpr_base = std::variant<
        constant, variable, arithmetic_binary
    >;

    struct aexpr_t : aexpr_base {
        using aexpr_base::aexpr_base;
    };

    template< arithmetic_kind kind >
    aexpr_t make_arithmetic(aexpr_t &&lhs, aexpr_t &&rhs) {
        return arithmetic_binary{
            kind, std::forward< decltype(lhs) >(lhs), std::forward< decltype(rhs) >(rhs)
        };
    }

    //
    // boolean expressions
    //
    struct boolean_constant { bool value; };

    struct lnot {
        box< struct bexpr_t > expr;
    };

    struct logical {
        enum class kind_t { land, lor };

        kind_t kind;
        box< struct bexpr_t > lhs, rhs;
    };

    struct relational {
        enum class kind_t { lt, le, eq, ne, gt, ge };

        kind_t kind;
        box< aexpr_t > lhs, rhs;
    };

    using predicate = relational::kind_t;

    template< predicate pred >
    relational make_relational(aexpr_t &&lhs, aexpr_t &&rhs) {
        return relational{
            pred, std::forward< decltype(lhs) >(lhs), std::forward< decltype(rhs) >(rhs)
        };
    }

    using bexpr_base = std::variant<
        boolean_constant, logical, relational
    >;

    struct bexpr_t : bexpr_base {
        using bexpr_base::bexpr_base;
    };

    //
    // expressions
    //

    using expr_t = std::variant< aexpr_t, bexpr_t >;

    //
    // statements
    //

    //
    // default implementation of imp operations
    //
    // Allows to define defatult implementation based on imp specific fields,
    // for example query scopes
    //
    template< typename derived >
    struct imp_operation_base : operation_base< derived > {
        using base = operation_base< derived >;

        constexpr bool escape() const noexcept;
    };


    //
    // assign statement
    //
    struct assign : imp_operation_base< assign > {
        variable var;
        expr_t expr;

        assign(variable v, expr_t e)
            : var(std::move(v))
            , expr(std::move(e))
        {}

        constexpr std::string format(unsigned indent = 0) const noexcept {
            return format_indent(indent, "assign : {}", entry());
        }
    };

    //
    // skip statement
    //
    struct skip : imp_operation_base< skip > {
        constexpr std::string format(unsigned indent = 0) const noexcept {
            return format_indent(indent, "skip : {}", entry());
        }
    };

    //
    // break statement
    //
    struct break_iteration : imp_operation_base< break_iteration > {
        constexpr bool escape() const noexcept { return true; }

        constexpr std::string format(unsigned indent = 0) const noexcept {
            return format_indent(indent, "break : {}", entry());
        }
    };

    //
    // program termination statement
    //

    struct terminate : operation_base< terminate > {
        constexpr std::string format(unsigned indent = 0) const noexcept {
            return format_indent(indent, "exit : {}", entry());
        }
    };

    //
    // conditional statement
    //
    struct conditional : imp_operation_base< conditional > {
        bexpr_t cond;
        scope_wrapper then_stmt, else_stmt;

        conditional(bexpr_t c, operation_like auto &&t, operation_like auto &&e)
            : cond(std::move(c))
            , then_stmt(std::move(t))
            , else_stmt(std::move(e))
        {}

        static constexpr bool has_internal_scope() { return true; }

        constexpr std::string format(unsigned indent = 0) const noexcept {
            return format_indent(indent, "cond : {}\n", entry())
                 + format_indent(indent, "then : {}\n", then_stmt.format(indent + 1))
                 + format_indent(indent, "else : {}\n", else_stmt.format(indent + 1));
        }
    };

    //
    // while loop statement
    //
    struct while_loop : imp_operation_base< while_loop > {
        bexpr_t cond;
        scope_wrapper body;

        explicit while_loop(bexpr_t c, operation_like auto &&b)
            : cond(std::move(c)), body(std::forward< decltype(b) >(b))
        {}

        // TODO correct?
        label exit() const noexcept { return entry(); }

        constexpr bool escape() const noexcept { return false; }
        static constexpr bool has_internal_scope() { return true; }

        constexpr std::string format(unsigned indent = 0) const noexcept {
            return format_indent(indent, "while : {}\n", entry())
                 + format_indent(indent, "body : {}\n", body.format(indent + 1));
        }
    };

    //
    // full program statement
    //

    using program = scope;

} // namespace mi::imp

    REFL_AUTO( type(mi::imp::assign) )
    REFL_AUTO( type(mi::imp::skip) )
    REFL_AUTO( type(mi::imp::break_iteration) )
    REFL_AUTO( type(mi::imp::terminate) )
    REFL_AUTO( type(mi::imp::conditional), field(else_stmt), field(then_stmt) )
    REFL_AUTO( type(mi::imp::while_loop), field(body) )

export namespace mi::imp {

    template< typename derived >
    constexpr bool imp_operation_base< derived >::escape() const noexcept {
        if constexpr (derived::has_internal_scope() || derived::is_scope()) {
            return stdr::any_of(derived::scopes(), [] (const auto &v) {
                return v.escape();
            });
        }

        return false;
    }
}

    // constexpr label entry(const stmt_t &stmt) noexcept {
    //     return visit_boxed(stmt, [] (const auto &v) { return v.entry(); });
    // }

    // constexpr label entry(const operation_like auto &op) noexcept {
    //     return op.entry();
    // }

    // constexpr label exit(const stmt_t &stmt) noexcept {
    //     return visit_boxed(stmt, [] (const auto &v) { return v.exit(); });
    // }

    // constexpr label exit(const operation_like auto &op) noexcept {
    //     return op.exit();
    // }

    // constexpr bool has_internal_scope(const stmt_t &stmt) noexcept {
    //      return visit_boxed(stmt, [] (const auto &v) { return v.has_internal_scope; });
    // }

    // constexpr bool is_scope(const stmt_t &stmt) noexcept {
    //      return visit_boxed(stmt, [] (const auto &v) { return v.is_scope; });
    // }

    // constexpr bool escape(const operation_like auto &op) noexcept {
    //     return op.escape();
    // }

    // constexpr bool escape(const stmt_t &stmt) noexcept {
    //     return visit_boxed(stmt, [] (const auto &v) { return v.escape(); });
    // }

    // template< typename member_type_descriptor >
    // struct is_scope_field {
    //     using member_type = typename member_type_descriptor::value_type;
    //     static constexpr bool value = member_type::is_scope;
    // };

    // namespace detail {
    //     template< typename fields >
    //     scope_generator scopes(const auto &stmt) noexcept {
    //         if constexpr ( !fields::empty ) {
    //             using head = typename fields::head;
    //             co_yield head::get(stmt);
    //             co_yield scopes< typename fields::tail >(stmt);
    //         }
    //     }

    // } // namespace detail

    // template< typename list >
    // using scope_fields = wrap_type_list< list >::template filter< is_scope_field >;

    // scope_generator scopes(const operation_like auto &stmt) noexcept {
    //     using type_descriptor = decltype(refl::reflect(stmt));
    //     using fields = scope_fields< typename type_descriptor::member_types >;
    //     co_yield detail::scopes< fields >(stmt);
    // }

    // scope_generator scopes(const scope &stmt) noexcept {
    //     co_yield stmt;
    // }

    // scope_generator scopes(const stmt_t &stmt) noexcept {
    //     co_yield visit_boxed(stmt,
    //     [&] (const auto &s)   -> scope_generator {
    //         co_yield imp::scopes(s);
    //     });
    // }

    // constexpr std::optional< label > exit_of(const program &sc, const auto &op) noexcept {
    //     return sc.exit_of(op);
    // }

    // constexpr std::optional< label > exit_of(const scope &sc, const auto &op) noexcept {
    //     return sc.exit_of(op);
    // }

    // constexpr std::optional< label > exit_of(const auto &sc, const auto &op) noexcept {
    //     return std::visit(
    //         overloaded{
    //             [&] (const scope &v) -> std::optional< label > { return v.exit_of(op); },
    //             [ ] (const auto &)   -> std::optional< label > { return std::nullopt; }
    //         }, sc);
    // }

    // template< typename stream >
    // auto operator<<(stream& os, const stmt_t& s) -> decltype( os << "" ) {
    //     using return_type = decltype( os << "" );
    //     return std::visit( overloaded{
    //         [&] (const boxed auto &v) -> return_type { return os << *v; },
    //         [&] (const auto &v) -> return_type { return os << v; }
    //     }, s);
    // }

// } // namespace mi::imp
