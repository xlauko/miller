module;

#include <compare>
#include <cstdint>
#include <limits>
#include <ios>

#include <fmt/core.h>
#include <fmt/ostream.h>

export module miller.program:label;

export namespace mi {

    struct label {
        std::uintptr_t op;

        auto operator<=>(const label&) const = default;
    };

    template< typename T >
    label self_entry_label(const T &value) {
        return { reinterpret_cast< uintptr_t >(&value) };
    }

    constexpr label next_label_tag = { std::numeric_limits< uintptr_t >::max() };

} // namespace mi

export template <>
struct fmt::formatter< mi::label > : formatter< std::string_view > {

    auto format(const mi::label &l, format_context& ctx) const {
        auto repr = l == mi::next_label_tag ? "next" : fmt::format("{:#08x}", l.op);
        return fmt::formatter< std::string_view >::format(repr, ctx);
    }
};

namespace mi {

    template< typename ostream >
    auto operator<<(ostream& os, const label& l) -> decltype( os << "" ) {
        return os << fmt::format("{}", l);
    }

} // namespace mi


namespace std {
    export template<>
    struct hash< ::mi::label > {
        size_t operator()(::mi::label lab) const noexcept {
            return hash< std::uintptr_t >()(lab.op);
        }
    };
} // namespace std
