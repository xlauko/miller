module;

#include <compare>
#include <cstdint>
#include <limits>
#include <ios>

export module miller.program:label;

export namespace mi {

    struct label {
        std::uintptr_t op;

        auto operator<=>(const label&) const = default;
    };

    template< typename T >
    label self_entry_label(const T &value) {
        return { reinterpret_cast< uintptr_t >(&value) };
    }

    constexpr label next_label_tag = { std::numeric_limits< uintptr_t >::max() };

    template< typename ostream >
    auto operator<<(ostream& os, const label& l) -> decltype( os << "" )
    {
        if (l == next_label_tag) {
            return os << "next";
        } else {
            return os << std::hex << l.op;
        }
    }

} // namespace mi
