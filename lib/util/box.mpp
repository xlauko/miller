module;

#include <concepts>
#include <memory>
#include <variant>

export module miller.util:box;

import :overloaded;

namespace mi
{
    export template< typename T >
    class box {
        std::unique_ptr< T > _impl;

      public:
        box(T &&obj)
            : _impl(new T(std::move(obj)))
        {}

        box(const T &obj)
            : _impl(new T(obj))
        {}

        box(const box &other) : box(*other._impl) {}
        box &operator=(const box &other) {
            *_impl = *other._impl;
            return *this;
        }

        box(box &&other) noexcept = default;
        box &operator=(box &&other) noexcept = default;

        ~box() = default;

        const T& unwrap() const { return *_impl.get(); }

        T &operator*() { return *_impl; }
        const T &operator*() const { return *_impl; }

        T *operator->() { return _impl.get(); }
        const T *operator->() const { return _impl.get(); }
    };

    export template< typename T >
    concept boxed = requires(T v) {
        { box{v} } -> std::same_as< T >;
    };

    //
    // applies function to boxed value or directly to value if it is not boxed
    //
    export template< typename function >
    constexpr decltype(auto) visit_boxed(auto &&value, function &&fn) noexcept {
        return std::visit(
            overloaded{
                [fn = std::forward< function >(fn)] (const boxed auto &v) { return fn(*v); },
                [fn = std::forward< function >(fn)] (const auto &v) { return fn(v); }
            }, std::forward< decltype(value) >(value));
    }


} // namespace mi
